/*
 * Copyright (c) 2022 Ben Vallack <ben@vallack.com>
 * SPDX-License-Identifier: MIT
 *
 * Based on Ben Vallack's cradio.keymap (commit 84ae125)
 * Modified to use standard QWERTY layout on the base layer.
 * Adapted for Corne Chocofi (36-key) with Nice!Nano v2.
 * Includes sensor bindings for encoders from rabidhouseplant's original keymap.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/modifiers.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/macros.h>
#include <dt-bindings/zmk/mouse.h> // Included in original cradio.keymap

// Define key positions (from cradio)
#define KEYPOS_L5 0
#define KEYPOS_L4 1
#define KEYPOS_L3 2
#define KEYPOS_L2 3
#define KEYPOS_L1 4
#define KEYPOS_R1 5
#define KEYPOS_R2 6
#define KEYPOS_R3 7
#define KEYPOS_R4 8
#define KEYPOS_R5 9

#define KEYPOS_LM5 10
#define KEYPOS_LM4 11
#define KEYPOS_LM3 12
#define KEYPOS_LM2 13
#define KEYPOS_LM1 14
#define KEYPOS_RM1 15
#define KEYPOS_RM2 16
#define KEYPOS_RM3 17
#define KEYPOS_RM4 18
#define KEYPOS_RM5 19

#define KEYPOS_LL5 20
#define KEYPOS_LL4 21
#define KEYPOS_LL3 22
#define KEYPOS_LL2 23
#define KEYPOS_LL1 24
#define KEYPOS_RL1 25
#define KEYPOS_RL2 26
#define KEYPOS_RL3 27
#define KEYPOS_RL4 28
#define KEYPOS_RL5 29

#define KEYPOS_LTH5 30
#define KEYPOS_LTH4 31
#define KEYPOS_LTH3 32
#define KEYPOS_RTH3 33
#define KEYPOS_RTH4 34
#define KEYPOS_RTH5 35

// Define layer names (from cradio)
#define _QWERTY 0 // Base layer name, now holds QWERTY bindings
#define _LOWER 1
#define _RAISE 2
#define _ADJUST 3

// Define aliases (from cradio)
#define XXX &none
#define ___ &trans

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    behaviors {
        // --- Start of Behaviors from cradio.keymap ---
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = ;
            tapping-term-ms = ;
            quick-tap-ms = ;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = ;
            tapping-term-ms = ;
            quick-tap-ms = ;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Smart parens
        lpar: behavior_lpar { compatible = "zmk,behavior-macro"; label = "LPAR"; #binding-cells = ; bindings = <&kp LPAR &kp RPAR &kp LEFT>; wait-ms = ; tap-ms = ; };
        rpar: behavior_rpar { compatible = "zmk,behavior-macro"; label = "RPAR"; #binding-cells = ; bindings = <&kp RPAR>; };
        // Brackets
        lbrc: behavior_lbrc { compatible = "zmk,behavior-macro"; label = "LBRC"; #binding-cells = ; bindings = <&kp LBKT &kp RBKT &kp LEFT>; wait-ms = ; tap-ms = ; };
        rbrc: behavior_rbrc { compatible = "zmk,behavior-macro"; label = "RBRC"; #binding-cells = ; bindings = <&kp RBKT>; };
        // Curly braces
        lcl: behavior_lclbr { compatible = "zmk,behavior-macro"; label = "LCLBR"; #binding-cells = ; bindings = <&kp LBRC &kp RBRC &kp LEFT>; wait-ms = ; tap-ms = ; };
        rcl: behavior_rclbr { compatible = "zmk,behavior-macro"; label = "RCLBR"; #binding-cells = ; bindings = <&kp RBRC>; };
        // Angle brackets
        lt: behavior_lt { compatible = "zmk,behavior-macro"; label = "LT"; #binding-cells = ; bindings = <&kp LT &kp GT &kp LEFT>; wait-ms = ; tap-ms = ; };
        gt: behavior_gt { compatible = "zmk,behavior-macro"; label = "GT"; #binding-cells = ; bindings = <&kp GT>; };
        // Backspace word
        bspwr: behavior_bspwr { compatible = "zmk,behavior-macro"; label = "BSPWRD"; #binding-cells = ; bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp BSPC>, <&macro_release &kp LCTRL>; };
        // Delete word
        delwr: behavior_delwr { compatible = "zmk,behavior-macro"; label = "DELWRD"; #binding-cells = ; bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp DEL>, <&macro_release &kp LCTRL>; };
        // Undo
        und: behavior_und { compatible = "zmk,behavior-macro"; label = "UNDO"; #binding-cells = ; bindings = <&kp LC(Z)>; };
        // Cut
        cut: behavior_cut { compatible = "zmk,behavior-macro"; label = "CUT"; #binding-cells = ; bindings = <&kp LC(X)>; };
        // Copy
        cpy: behavior_cpy { compatible = "zmk,behavior-macro"; label = "COPY"; #binding-cells = ; bindings = <&kp LC(C)>; };
        // Paste
        pst: behavior_pst { compatible = "zmk,behavior-macro"; label = "PASTE"; #binding-cells = ; bindings = <&kp LC(V)>; };
        // Redo
        rdo: behavior_rdo { compatible = "zmk,behavior-macro"; label = "REDO"; #binding-cells = ; bindings = <&kp LC(Y)>; };
        // Copy mouse text
        mcpy: behavior_mcpy { compatible = "zmk,behavior-macro"; label = "MOUSE_COPY"; #binding-cells = ; bindings = <&kp LC(INS)>; };
        // Select All
        selall: behavior_selall { compatible = "zmk,behavior-macro"; label = "SELALL"; #binding-cells = ; bindings = <&kp LC(A)>; };
        // Swap application windows (Mac specific?)
        swapp: behavior_swapp { compatible = "zmk,behavior-macro"; label = "SWAPP"; #binding-cells = ; bindings = <&kp LG(GRAVE)>; };
        // Swap application windows (Alt-tab)
        swaw: behavior_swaw { compatible = "zmk,behavior-macro"; label = "SWAW"; #binding-cells = ; bindings = <&kp LA(TAB)>; };
        // Swap desktop windows (Mac specific?)
        swdw: behavior_swdw { compatible = "zmk,behavior-macro"; label = "SWDW"; #binding-cells = ; bindings = <&kp LG(TAB)>; };
        // Screenshot (Mac specific?)
        ss: behavior_ss { compatible = "zmk,behavior-macro"; label = "SS"; #binding-cells = ; bindings = <&kp LG(LS(N4))>; };
        // Single Quote
        sqt: behavior_sqt { compatible = "zmk,behavior-macro"; label = "SQT"; #binding-cells = ; bindings = <&kp SQ &kp SQ &kp LEFT>; wait-ms = ; tap-ms = ; };
        // Double Quote
        dqt: behavior_dqt { compatible = "zmk,behavior-macro"; label = "DQT"; #binding-cells = ; bindings = <&kp DQT &kp DQT &kp LEFT>; wait-ms = ; tap-ms = ; };
        // Dollar sign
        dlr: behavior_dlr { compatible = "zmk,behavior-macro"; label = "DLLR"; #binding-cells = ; bindings = <&kp DLLR>; };
        // Tilde
        til: behavior_til { compatible = "zmk,behavior-macro"; label = "TIL"; #binding-cells = ; bindings = <&kp NON_US_HASH>; }; // Tilde (NON_US_HASH is often ~ on US layout)
        // Exclamation mark
        exlm: behavior_exlm { compatible = "zmk,behavior-macro"; label = "EXLM"; #binding-cells = ; bindings = <&kp EXCL>; };
        // Colon
        col: behavior_col { compatible = "zmk,behavior-macro"; label = "COL"; #binding-cells = ; bindings = <&kp COLON>; };
        // Semicolon
        scln: behavior_scln { compatible = "zmk,behavior-macro"; label = "SCLN"; #binding-cells = ; bindings = <&kp SEMI>; };
        // Terminal Macro (Mac specific? Adjust as needed)
        term: behavior_term {
            compatible = "zmk,behavior-macro";
            label = "TERM";
            #binding-cells = ;
            bindings = <&macro_sequence &kp LGUI &kp SPACE &kp SEMI &kp T &kp E &kp R &kp M &kp RET>;
            wait-ms = ;
            tap-ms = ;
        };
        // Find
        fnd: behavior_fnd { compatible = "zmk,behavior-macro"; label = "FIND"; #binding-cells = ; bindings = <&kp LC(F)>; };
        // Caps Word
        caps: behavior_caps { compatible = "zmk,behavior-caps-word"; label = "CAPS"; #binding-cells = ; };

        // Tap Dances (from cradio)
        tap_dance_1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1_DOT_COMMA_COLON";
            #binding-cells = ;
            tapping-term-ms = ;
            bindings = <&kp DOT>, <&kp COMMA>, <&col>; // Tap: ., Double Tap: ,, Triple Tap: :
        };
        tap_dance_2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD2_SQT_DQT";
            #binding-cells = ;
            tapping-term-ms = ;
            bindings = <&sqt>, <&dqt>; // Tap: '', Double Tap: ""
        };
        tap_dance_3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD3_ESC_CAPS";
            #binding-cells = ;
            tapping-term-ms = ;
            bindings = <&kp ESC>, <&caps>; // Tap: Esc, Double Tap: Caps Word
        };
        // --- End of Behaviors from cradio.keymap ---
    };

    macros {
        // Empty, as cradio defines macros inline within behaviors
    };

    combos {
        compatible = "zmk,behavior-combo";
        timeout-ms = ;
        key-positions = <
             0  1  2  3  4   18 19 20 21 22 // Indices match 36-key Corne layout
             5  6  7  8  9   23 24 25 26 27
            10 11 12 13 14   28 29 30 31 32
                   15 16 17  33 34 35
        >;
        // Combos from cradio (Ensure key positions match QWERTY layout locations if needed)
        // Key position numbers below assume the layout mapping shown above.
        combo_esc { bindings = <&kp ESC>; key-positions = <3 4>; }; // R + T
        combo_tab { bindings = <&kp TAB>; key-positions = <0 1>; }; // Q + W
        combo_bspc { bindings = <&kp BSPC>; key-positions = <21 22>; }; // O + P
        combo_del { bindings = <&kp DEL>; key-positions = <26 27>; }; // L + ;
        combo_ret { bindings = <&kp RET>; key-positions = <25 26>; }; // K + L
        combo_und { bindings = <&und>; key-positions = <1 2>; }; // W + E
        combo_cut { bindings = <&cut>; key-positions = <5 6>; }; // A + S
        combo_cpy { bindings = <&cpy>; key-positions = <6 7>; }; // S + D
        combo_pst { bindings = <&pst>; key-positions = <7 8>; }; // D + F
        // Additional cradio combos:
        // combo_mcpy { bindings = <&mcpy>; key-positions = <KEYPOS_LM4 KEYPOS_LM3>; };
        // combo_rdo { bindings = <&rdo>; key-positions = <KEYPOS_L4 KEYPOS_L3>; };
        // combo_ss { bindings = <&ss>; key-positions = <KEYPOS_LM5 KEYPOS_LM4>; };
        // combo_swapp { bindings = <&swapp>; key-positions = <KEYPOS_RM4 KEYPOS_RM5>; };
        // combo_swaw { bindings = <&swaw>; key-positions = <KEYPOS_RM3 KEYPOS_RM4>; };
        // combo_swdw { bindings = <&swdw>; key-positions = <KEYPOS_RM2 KEYPOS_RM3>; };
        // combo_term { bindings = <&term>; key-positions = <KEYPOS_RM1 KEYPOS_RM2>; };
    };

    keymap {
        compatible = "zmk,behavior-keymap";

        // Base Layer (_QWERTY) - Modified for standard QWERTY layout
        _QWERTY {
            bindings = <
            // Top Row:    Q         W         E         R         T                       Y         U         I         O         P
                       &kp Q     &kp W     &kp E     &kp R     &kp T                   &kp Y     &kp U     &kp I     &kp O     &kp P
            // Home Row:   A(Shift)  S(Ctrl)   D(Alt)    F(Gui)    G                       H         J(Gui)    K(Alt)    L(Ctrl)   ;(Shift)
                       &hml LSHFT A &hml LCTRL S &hml LALT D &hml LGUI F &kp G         &kp H     &hmr RGUI J &hmr RALT K &hmr RCTRL L &hmr RSHIFT SEMI
            // Bottom Row: Z         X         C         V         B                       N         M         ,         .         /
                       &kp Z     &kp X     &kp C     &kp V     &kp B                   &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH
            // Thumb Row:  Lower(Gui) Backspace Alt                      Tab      Enter     Raise(Alt)
                                         &lt _LOWER LGUI  &kp BSPC  &kp LALT           &kp TAB   &kp RET   &lt _RAISE RALT
            >;
        };

        // Lower Layer (_LOWER) - Symbols and Numbers (from cradio)
        _LOWER {
            bindings = <
            &kp ESC    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5              &kp N6   &kp N7     &kp N8     &kp N9     &kp N0
            &kp TAB    &exlm EXCL &kp AT     &kp HASH   &dlr DLLR  &kp PRCNT           &kp CARET&kp AMPS    &kp STAR   &kp EQUAL  &kp PLUS
            &kp LSHFT  &kp TILDE  &kp GRAVE  &kpUNDS    &kp MINUS  &kp BSLH            &kp PIPE &kp LPAR   &kp RPAR   &kp QMARK  &kp FSLH
                                              &tog _ADJUST &___     &___               &kp LBKT &kp RBKT   &___
            >;
        };

        // Raise Layer (_RAISE) - Navigation, Function Keys, etc. (from cradio)
        _RAISE {
            bindings = <
            &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6              &kp F7   &kp F8     &kp F9     &kp F10    &kp F11
            &kp LSHFT  &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &pst                &kp LEFT &kp DOWN   &kp UP     &kp RIGHT  &kp F12
            &kp LGUI   &kp LALT   &kp LCTRL  &kp VOL_DN &kp VOL_UP &bspwr              &delwr   &td 1      &td 2      &kp BSPC   &kp DEL
                                              &mo _ADJUST &kp LALT  &kp RET            &kp TAB  &___       &___
            >;
        };

        // Adjust Layer (_ADJUST) - System, Bluetooth, etc. (from cradio)
        _ADJUST {
            bindings = <
            &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3    &kp C_PREV &kp C_PP &kp C_NEXT &bootloader &bootloader
            &___       &___         &___         &___         &___            &___       &___     &___       &___        &___
            &kp LGUI   &kp LALT     &kp LCTRL    &kp LSHFT    &kp RSHFT       &___       &rgb_ug RGB_TOG &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_HUI
                                                 &___         &___ &___                   &___     &___       &sys_reset // Reset accessible here
            >;
        };
    };

    // Sensor bindings for encoder(s) - Added from rabidhouseplant's original map
    sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
};
